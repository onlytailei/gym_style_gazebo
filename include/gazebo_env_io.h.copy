/*************************************************************************
  > File Name: gazebo_env_io.h
  > Author: TAI Lei
  > Mail: lei.tai@my.cityu.edu.hk
  > Created Time: Mo 08 Mai 2017 16:33:39 CEST
 ************************************************************************/

#ifndef _GAZEBO_ENV_IO_H
#define _GAZEBO_ENV_IO_H

#include <ros/ros.h>
#include <sensor_msgs/LaserScan.h>
#include <sensor_msgs/Image.h>
#include <gym_style_gazebo/PytorchRL.h>
#include <iostream>
#include <vector>
#include <string>
#include <iterator>
#include <thread>
#include "rl_utils.h"

namespace RL{
  template<class StateType, class ActionType>
    class GazeboEnvIO{

      private:
        std::unique_ptr<ros::NodeHandle> n_;
        ros::Subscriber StateSub;
        ros::ServiceServer PytorchService;
        
        void StateCallback(const StateType& );

        bool ServiceCallback(gym_style_gazebo::PytorchRL::Request&,
            gym_style_gazebo::PytorchRL::Response&);
        
        std::unique_ptr<RL::RL_Utils>  rl_utils_; 
        float sleeping_time_;
        
        //float collision_th_;
        //bool CollisionCheck();
        //void LaserCallback(const sensor_msgs::LaserScan::ConstPtr&);
        //std::vector<sensor_msgs::LaserScan::ConstPtr> LaserPtrVector;
        //ros::Subscriber LaserSub; 
      
      public:
        ros::Publisher ActionPub;
        std::vector<StateType> StatePtrVector;
        GazeboEnvIO(
            const RL::RL_Utils & rl_utils,
            const std::string state_topic_name="/camera/depth/image_raw",
            const std::string action_topic_name="/mobile",
            const std::string service_name="pytorch_service",
            const std::string node_name="gazebo_env_interface",
            const float sleeping_time=0);
    };

  template<class StateType>
  class RecieveNewTopic{
    private:
      
    public:

  }
}
#endif
